var ERC20Manager = artifacts.require("./ERC20Manager.sol");
const Storage = artifacts.require('./Storage.sol');
const StorageManager = artifacts.require("./StorageManager.sol");
const ContractsManager = artifacts.require("./ContractsManager.sol");
const MultiEventsHistory = artifacts.require("./MultiEventsHistory.sol");

module.exports = function(deployer, network) {
    deployer
      .then(() => ERC20Manager.deployed())
      .then(_manager => manager = _manager)

      .then(() => console.log("  Manager ", manager.address, "#destroying .."))

      /* reject access to  MultiEventsHistory */

      .then(() => MultiEventsHistory.deployed())
      .then(_history => history = _history)
      .then(() => history.reject(ERC20Manager.address))
      .then(() => history.isAuthorized.call(ERC20Manager.address))
      .then((result) => {
          if (result) {
              console.error("  Manager is still authorized to emit events");
          } else {
              console.log("  Manager is not authorized to emit events anymore");
          }
      })

      /* destroy */

      .then(() => manager.destroy())
      .then(() => console.log("  Manager is destroyed"))

      /* reject access to write in the Storage */

      .then(() => StorageManager.deployed())
      .then(_storageManager => storageManager = _storageManager)
      .then(() => storageManager.blockAccess(manager.address, "ERC20 Manager"))
      .then(() => storageManager.isAllowed(manager.address, "ERC20 Manager"))
      .then((result) => {
          if (result) {
              console.error("  Manager is still authorized to write in the storage");
          } else {
              console.log("  Manager is not authorized to write in the storage anymore");
          }
      })

      /* make sure that destroyed contract is not in services list after destroying */

      .then(() => ContractsManager.deployed())
      .then((_contractsManager) => _contractsManager.isExists.call(manager.address))
      .then((result) => {
          if (result) {
              console.error("  Manager is still in services list");
          } else {
              console.log("  Manager is not in services list");
          }
      })
      .then(() => console.log("  Manager: #undeployed"))
}
