const ChronoBankPlatform = artifacts.require("./ChronoBankPlatform.sol");
const ChronoBankAssetProxy = artifacts.require("./ChronoBankAssetProxy.sol");
const ChronoBankAssetWithFeeProxy = artifacts.require("./ChronoBankAssetWithFeeProxy.sol");
const ChronoBankAssetWithFee = artifacts.require("./ChronoBankAssetWithFee.sol");
const ChronoBankAsset = artifacts.require("./ChronoBankAsset.sol");
const AssetsManager = artifacts.require("./AssetsManager.sol");
const Rewards = artifacts.require("./Rewards.sol");
const ERC20Manager = artifacts.require("./ERC20Manager.sol");
const LOCManager = artifacts.require('./LOCManager.sol');
const PlatformFactory = artifacts.require('./PlatformFactory.sol');
const Web3 = require("web3");
const bs58 = require("bs58");
const BigNumber = require("bignumber.js");
const Buffer = require("buffer").Buffer;

module.exports = function(deployer,network, accounts) {
    var web3 = new Web3(deployer.provider);

    const TIME_SYMBOL = 'TIME'; // TODO: AG(21-06-2017) copy-paste warn
    const TIME_NAME = 'Time Token';
    const TIME_DESCRIPTION = 'ChronoBank Time Shares';

    const LHT_SYMBOL = 'LHT';
    const LHT_NAME = 'Labour-hour Token';
    const LHT_DESCRIPTION = 'ChronoBank Lht Assets';

    const BASE_UNIT = 8;
    const IS_REISSUABLE = true;
    const IS_NOT_REISSUABLE = false;
    const WITH_FEE = true;
    const WITHOUT_FEE = false;

    // https://ipfs.infura.io:5001
    const lhtIconIpfsHash = "Qmdhbz5DTrd3fLHWJ8DY2wyAwhffEZG9MoWMvbm3MRwh8V";

    deployer
      .then(() => {
          if (PlatformFactory.isDeployed()) {
              return PlatformFactory.deployed()
          } else {
              return deployer.deploy(PlatformFactory)
          }
      })
      .then(() => Rewards.deployed())
      .then(_rewards => rewards = _rewards)
      .then(() => AssetsManager.deployed())
      .then(_assetsManager => assetsManager = _assetsManager)
      .then(() => ERC20Manager.deployed())
      .then(_erc20Manager => erc20Manager = _erc20Manager)
        .then(() => {
            return assetsManager.requestNewAsset(TIME_SYMBOL)
            .then(tx => {
                console.log("request " + TIME_SYMBOL + ": " + JSON.stringify(tx, null, 5));
                let newAssetRequestedEvent = tx.logs.find((ev) => ev.event.toLowerCase() == "NewAssetRequested".toLowerCase())
                if (newAssetRequestedEvent == undefined) {
                    // TODO: better approach appriciated
                    console.error("Error while requesting new asset creation for " + TIME_SYMBOL)
                    throw "NewAssetRequested for " + TIME_SYMBOL
                }
                let requestId = newAssetRequestedEvent.args.requestId
                console.log("request id for " + TIME_SYMBOL + " " + requestId);
                return assetsManager.redeemNewAsset(requestId, TIME_NAME, TIME_DESCRIPTION, 1000000000000, BASE_UNIT, IS_NOT_REISSUABLE, WITHOUT_FEE)
            }).then((tx) => {
                console.log("TIME: " + JSON.stringify(tx.logs, null, 5));
            })
            .then(() => assetsManager.requestNewAsset(LHT_SYMBOL))
            .then(tx => {
                console.log("request " + LHT_SYMBOL + ": " + JSON.stringify(tx, null, 5));
                let newAssetRequestedEvent = tx.logs.find((ev) => ev.event.toLowerCase() == "NewAssetRequested".toLowerCase())
                if (newAssetRequestedEvent == undefined) {
                    // TODO: better approach appriciated
                    console.error("Error while requesting new asset creation for " + LHT_SYMBOL)
                    throw "NewAssetRequested for " + LHT_SYMBOL
                }
                let requestId = newAssetRequestedEvent.args.requestId
                console.log("request id for " + LHT_SYMBOL + " " + requestId);
                return assetsManager.redeemNewAsset(requestId, LHT_NAME, LHT_DESCRIPTION, 0, BASE_UNIT, IS_REISSUABLE, WITH_FEE)
            }).then(tx => {
                let newAssetCreatedEvent = tx.logs.find((ev) => ev.event.toLowerCase() == "AssetCreated".toLowerCase())
                console.log("LHT: " + JSON.stringify(tx.logs, null, 5));
                if (newAssetCreatedEvent == undefined) {
                    // TODO: better approach appriciated
                    console.error("Error while redeeming new asset for " + LHT_SYMBOL)
                    throw "AssetCreated for " + LHT_SYMBOL
                }

                return ChronoBankAssetWithFeeProxy.at(newAssetCreatedEvent.args.token)
            })
            .then(_chronoBankAssetWithFeeProxy => {
                return _chronoBankAssetWithFeeProxy.getLatestVersion().then(_address => ChronoBankAssetWithFee.at(_address))
            })
            .then(_chronoBankAssetWithFee => {
                return _chronoBankAssetWithFee.setupFee(Rewards.address, 100)
            })
        })
      .then(() => {
        if (network !== "test") {
            return assetsManager.addAssetOwner(TIME_SYMBOL, web3.eth.accounts[0])
        }
      })
      .then(() => {
        if (network !== "test") {
            return assetsManager.addAssetOwner(LHT_SYMBOL, LOCManager.address)
                  .then(() => erc20Manager.getTokenBySymbol.call(LHT_SYMBOL))
                  .then((asset) => {
                    return erc20Manager.setToken(asset[0], asset[0], asset[1], asset[2], asset[3], asset[4], ipfsHashToBytes32(lhtIconIpfsHash), asset[6])})
                      .then(() => erc20Manager.getTokenBySymbol.call(LHT_SYMBOL))
                      .then((asset) => {
                        if (lhtIconIpfsHash != bytes32ToIPFSHash(asset[5])) {
                            console.error("Error: can't setup LHT icon");
                        }
                  })
        }
      })
      .then(() => console.log("[MIGRATION] [32] Setup Assets: #done"))
}

// Util function
// TODO: @ahiatsevich: copy-paste from
// ChronoBank/ChronoMint/src/utils/Web3Converter.js

function bytes32ToIPFSHash (bytes) {
  if (/^0x0{63}[01]$/.test(`${bytes}`)) {
    return ''
  }
  const str = Buffer.from(bytes.replace(/^0x/, '1220'), 'hex')
  return bs58.encode(str)
}

function ipfsHashToBytes32 (value) {
  return `0x${Buffer.from(bs58.decode(value)).toString('hex').substr(4)}`
}
