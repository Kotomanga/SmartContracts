var AssetsManager = artifacts.require("./AssetsManager.sol");
const Storage = artifacts.require('./Storage.sol');
const StorageManager = artifacts.require("./StorageManager.sol");
const ProxyFactory = artifacts.require("./ProxyFactory.sol");
const ContractsManager = artifacts.require("./ContractsManager.sol");
const MultiEventsHistory = artifacts.require("./MultiEventsHistory.sol");
const ChronoBankPlatform = artifacts.require("./ChronoBankPlatform.sol");
const ChronoBankAssetProxy = artifacts.require("./ChronoBankAssetProxy.sol");
const ChronoBankAssetWithFeeProxy = artifacts.require("./ChronoBankAssetWithFeeProxy.sol");
const ChronoBankAssetWithFee = artifacts.require("./ChronoBankAssetWithFee.sol");
const ChronoBankAsset = artifacts.require("./ChronoBankAsset.sol");

module.exports = function(deployer, network, accounts) {
    if (network !== 'test' && network !== 'development') {
        return;
    }

    const TIME_SYMBOL = 'TIME';
    const LHT_SYMBOL = 'LHT';
    const owner = accounts[0]

    deployer.then(() => ChronoBankPlatform.deployed())
      .then(_platform => platform = _platform)
      .then(() => AssetsManager.deployed())
      .then(_manager => manager = _manager)
      .then(() => ChronoBankAssetProxy.deployed())
      .then(_assetProxy => assetProxy = _assetProxy)

      .then(() => console.log("  Manager ", manager.address, "#destroying .."))

      /* reject access to  MultiEventsHistory */

      .then(() => MultiEventsHistory.deployed())
      .then(_history => history = _history)
      .then(() => history.reject(AssetsManager.address))
      .then(() => history.isAuthorized.call(AssetsManager.address))
      .then((result) => {
          if (result) {
              console.error("  Manager is still authorized to emit events");
          } else {
              console.log("  Manager is not authorized to emit events anymore");
          }
      })

      /* store tokens until new AssetsManager contract will be deployed */

      .then(() => assetProxy.balanceOf(manager.address))
      .then((_balance) => {
          console.log("Balance of an old manager " + manager.address + " is " + _balance);
      })
      .then(() => manager.withdrawnTokens([ChronoBankAssetProxy.address], owner))
      .then(() => assetProxy.balanceOf(owner))
      .then((_balance) => {
          console.log("Balance of a middleman (temp) " + owner + " is " + _balance);
      })
      /* destroy */

      .then(() => manager.destroy([TIME_SYMBOL, LHT_SYMBOL]))
      .then(() => console.log("  Manager is destroyed"))
      .then(() => {
          return platform.isOwner(accounts[0], TIME_SYMBOL)
          .then((r) => {
              if (r) {
                  console.log("Ownership of TIME_SYMBOL passed");
              } else {
                  console.log("Ownership of TIME_SYMBOL failed");
              }
          })
          .then(() => platform.isOwner(accounts[0], LHT_SYMBOL))
          .then((r) => {
              if (r) {
                  console.log("Ownership of LHT_SYMBOL passed");
              } else {
                  console.log("Ownership of LHT_SYMBOL failed");
              }
          })
      })
      .then(() => platform.claimContractOwnership())
      .then(() => platform.contractOwner())
      .then(_ownerAddres => {
          if (_ownerAddres == accounts[0]) {
              console.log("Platform successfuly passed to an account[0]");
          } else {
              console.log("Platform failed to be passed to an account[0]");
          }
      })

      /* reject access to write in the Storage */

      .then(() => StorageManager.deployed())
      .then(_storageManager => storageManager = _storageManager)
      .then(() => storageManager.blockAccess(manager.address, "ERC20 Manager"))
      .then(() => storageManager.isAllowed(manager.address, "ERC20 Manager"))
      .then((result) => {
          if (result) {
              console.error("  Manager is still authorized to write in the storage");
          } else {
              console.log("  Manager is not authorized to write in the storage anymore");
          }
      })

      /* make sure that destroyed contract is not in services list after destroying */

      .then(() => ContractsManager.deployed())
      .then((_contractsManager) => _contractsManager.isExists.call(manager.address))
      .then((result) => {
          if (result) {
              console.error("  Manager is still in services list");
          } else {
              console.log("  Manager is not in services list");
          }
      })
      .then(() => console.log("  Manager: #undeployed"))

      /* deploy new contract of AssetsManager */

      .then(() => deployer.deploy(AssetsManager, Storage.address, 'AssetsManager'))
      .then(() =>  StorageManager.deployed())
      .then(_storageManager => _storageManager.giveAccess(AssetsManager.address, 'AssetsManager'))
      .then(() => AssetsManager.deployed())
      .then(_manager => newManager = _manager)
      .then(() => newManager.init(ChronoBankPlatform.address, ContractsManager.address, ProxyFactory.address))
      .then(() => MultiEventsHistory.deployed())
      .then(_history => _history.authorize(newManager.address))

      /* withdrawn all known tokens from middleman to a new assets manager */

      .then(() => assetProxy.balanceOf(owner))
      .then(_balance => assetProxy.transfer(newManager.address, _balance))
      .then(() => assetProxy.balanceOf(newManager.address))
      .then((_balance) => {
          console.log("Balance of a new manager " + newManager.address + " is " + _balance);
      })

      /* update ownership of assets */

      .then(() => platform.changeOwnership(TIME_SYMBOL, newManager.address))
      .then(() => platform.changeOwnership(LHT_SYMBOL, newManager.address))
      .then(() => platform.changeContractOwnership(newManager.address))
      .then((r) => {
          console.log("Change platform ownership is requested. Result: " + r)
          return newManager.claimPlatformOwnership()
      })
      .then(() => Promise.all([platform.contractOwner(), platform.pendingContractOwner()]))
      .then(_addresses => {
          console.log("Owner address: " + _addresses[0] + "; pending: " + _addresses[1]);
          if (_addresses[0] == newManager.address) {
              console.log("Platform successfuly passed to a new manager");
          } else {
              console.log("Platform failed to be passed to a new manager");
          }
      })
      .then(() => console.log("[MIGRATION] [61] AssetManager redeployed: #done"))
}
